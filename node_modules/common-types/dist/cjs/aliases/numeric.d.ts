import { OptSpace } from "./stringAliases";
export declare type NumericCharacter = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
export declare type Hexadecimal = NumericCharacter | "A" | "B" | "C" | "D" | "E" | "F";
export declare type Digit = NumericCharacter;
export declare type TwoDigit = `${Digit}${Digit}`;
export declare type OptTwoDigit = Digit | TwoDigit;
export declare type ThreeDigit = `${Digit}${Digit}${Digit}`;
declare type MostSignificantDigit = "0" | "1" | "2";
export declare type OptThreeDigit = Digit | TwoDigit | ThreeDigit;
/**
 * Provides strong typing for an eight bit number, represented as a string.
 * First digit must be 0-3, remaining two digits can be whatever you like.
 *
 * Must be three digits. If you want to provide length flexibility use `OptEightBitBase10`
 * instead.
 */
export declare type EightBitBase10 = `${MostSignificantDigit}${Digit}${Digit}`;
/**
 * Provides strong typing for an eight bit number, represented as a string.
 * First digit -- in a three digit number -- is limited to "1" or "2" others
 * are any valid digit.
 */
export declare type OptEightBitBase10 = `${Exclude<MostSignificantDigit, "0">}${Digit}${Digit}` | Digit | TwoDigit;
export declare type FourDigit = `${Digit}${Digit}${Digit}${Digit}`;
export declare type OptFourDigit = Digit | TwoDigit | ThreeDigit | FourDigit;
/** an aspect ration represented in the normal convention of "x:y" */
export declare type AspectRatioColon = `${number}:${number}`;
/** an aspect ratio represented in the CSS syntax */
export declare type AspectRatioCss = `${number}${OptSpace}/${OptSpace}${number}`;
/**
 * Allows the expression of an Aspect Ratio with both the standard "x:y"
 * convention _or_ the CSS variant of "a / y".
 */
export declare type AspectRatio = AspectRatioColon | AspectRatioCss;
export {};
